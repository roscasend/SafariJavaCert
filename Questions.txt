Q) Which are legal
A)
class X {
  var x = 99;
}

B) void doStuff(var x) { }

C)
void doStuff() {
  var x;
  x = 100;
}

D)
void doStuff() {
  var x = 100;
}

E)
void doStuff() {
  var x = { 1, 2, 3 };
}

Q) Which are legal:
A) void doStuff() {
  var x = new int[]{ 1, 2, 3 };
}
B) void doStuff() {
  var [] x = new int[]{ 1, 2, 3 };
}

C) void doStuff() {
  var x = 99;
  x = "Hello";
}

D) void doStuff() {
  var x = 1, y = 2;
}

E) void doStuff() {
  try {
   // stuff happens
   } catch (var ex) {
   }
}

Q)  A)
       for (var x = 0; x < 3; x++)
         System.out.println(x);
    B)
       try (var in = new FileReader("");
            var out = new FileWriter("")) {
       }
    C)
       var var = "var";

Q)  Which print "true"
A) String s = "Hello";
   String t = "He";
   t += "llo";
   sout(s == t);

B) String s = "Hello";
   String t = "He";
   t += "llo";
   sout(s.equals(t));

C) StringBuilder s = new StringBuilder("Hello");
   StringBuilder t = new StringBuilder("He");
   t.append("llo");
   sout(s.equals(t));

D) List<String> ls = List.of("Fred", "Jim");
   List<String> ls2 = new ArrayList<>(ls);
   sout(ls.equals(ls2));

E) LocalDate ld = LocalDate.of(2021, 3, 29);
   LocalDate ld2 = LocalDate.of(2021, 3, 29);
   sout(ld.equals(ld2));

Q) Which are true?
String s1 = "Hello";
String s2 = new StringBuilder("Hello").toString();
String s3 = s2.intern();
// in another jarfile:
class X {
  static String h = "Hello";
}
A) s1 == s2
B) s2 == s3
C) s1 == s3
D) X.h == s1

Q) Which are valid?
A) int x = 99; while (x) {}
B) int x = 99; switch (x) {}
C) enum Day { MONDAY; }
...
Day x = Day.MONDAY;
switch (x) {
case MONDAY:
}
D) enum Day { MONDAY; }
...
Day x = Day.MONDAY;
switch (x) {
case Day.MONDAY;
}
E) long count = 99;
switch (count) {}

Q) Which represent program bugs?
A) Error
B) Exception
C) Throwable
D) RuntimeException
E) null values

Q) Given:
class X {
    void doStuf() {}
}

Which are valid:
A) class Y extends X {
    void doStuf() throws FileNotFoundException {}
}
B) class Y extends X {
    void doStuf() throws RuntimeException {}
}
C) class Y extends X {
    void doStuf(int x) throws IOException {}
}
D) X.doStuf() can be modified with throws IOException
E) if X.doStuf() is modified with throws IOException
then Y.doStuf() can be modified with throws FileNotFoundException

Q) Given
  void doStuff() throws IOException {};
  void doStuff2() throws FileNotFoundException {};
And:
  void tryStuff() {
    try {
      doStuff();
      doStuff2();
    } enter code here {
      // handle both exceptions
    }
  }
What can be inserted at "enter code here"
to provide handling of exceptions from both
methods?
A) catch (IOException | FileNotFoundException e)
B) catch (FileNotFoundException | IOException e)
C) catch (FileNotFoundException e)
D) catch (IOException e)
E) finally

Q) Given
     void doStuff() throws SQLException {};
     void doStuff2() throws FileNotFoundException {};
   And:
     void tryStuff() throws XXX {
       try {
         doStuff();
         doStuff2();
       } catch (SQLException | FileNotFoundException e) {
         throw e;
       }
     }

   What is best inserted at XXX?
   A) throws Exception
   B) throws SQLException
   C) throws FileNotFoundException
   D) throws FileNotFoundException, SQLException
   E) nothing is needed, compilation succeeds as is

Q) Given
     public int getValue() {return 1;}
       which of these methods may individually be added to a subclass of this class?

A) public int getValue(int x) {return 1;}
B) public String getValue() {return "Hello";}
C) public String getValue(int x) {return "Hello";}

Q) Given these methods in scope
     void doStuff(int x, int y) {} // Method A
     void doStuff(int x, long y) {} // Method B
     void doStuff(long x, int y) {} // Method C
     void doStuff(int ... x) {} // Method D
     void doStuff(Integer x, Integer y) {} // Method E
     void doStuff(Integer x, Integer y, Integer z) {} // Method F

Which method is invoked by doStuff(1, 2)

Q) What happens if method A is deleted?
   A) Method B is invoked
   B) Method C is invoked
   C) Method D is invoked
   D) Method E is invoked
   E) Compilation fails

Q) What happens if methods A and B are deleted?
   A) Method C is invoked
   B) Method D is invoked
   C) Method E is invoked
   D) Compilation fails

Q) What happens if methods A B and C are deleted?
   A) Method C is invoked -- ooops!!!
   B) Method D is invoked
   C) Method E is invoked
   D) Compilation fails

Q)  Given:
    interface StudentCriterion {
      boolean test(Student s);
    }
and:
    class Student {
      public int getGpa() { return 0; }
      public List<String> getCourses() { return null; }
    }
Which are legal (individually):
      A) StudentCriterion sc = Student s -> { return s.getGpa() > 3;};
      B) StudentCriterion sc = s -> { s.getGpa() > 3 };
      C) Object sc = s -> {return s.getGpa() > 3;};
      D) StudentCriterion sc = (s) -> s.getGpa() > 3;
      E) StudentCriterion sc = s -> s.getCourses().size();

Q) Given:
   ???? (s, t) -> s.length() - t.length();

     Which are correct inserted in place of ????
     A) BiFunction<String, String, Integer> f =
     B) BiPredicate<String> f =
     C) Comparator<String> f =
     D) Supplier<String, Integer> f =
     E) BinaryOperator<String> f =